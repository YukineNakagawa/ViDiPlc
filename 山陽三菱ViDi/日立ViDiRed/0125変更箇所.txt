0202
処理流れ確認。
endlfag:trueで総合判定結果を表示する処理が必要
判定結果をどのように保持するか？


判定不可判定時
判定不可かつ総合判定（保持中）がNGではない > 総合判定=Inter
if (hanntei==inter &k_hanntei!=NG)
{
 k_hanntei=inter
}


NG判定時
k_hanntei=NG


次の画像表示処理で
if (k_hanntei==OK)
{
画像表示
}


すでに判定不可かNGが出ている場合は画像の更新を止める？




0201
フォルダの残り容量を確認する処理を検討
ワーク検査ごとに確認する。
空き容量が設定値以下で警告表示。
表示のみで削除などは行わない。


0130
その他画面にファイル削除処理を追加

0129
メイン画面のサイズ、表示要素を調整する
Gridの行間を絶対値からAutoに変更。
Gridと各要素のクリップ（Vertical/Horizontal Alignment）を適当に変更
各要素が属するGridを変更し、不要なGridを削除

各要素を画面中心付近に集めて、画面サイズを小さめに変更


不要なコードを削除

結果表示は総合判定まで残すように変更。

撮影周期の設定


未対応
連続動作時の確認
各変数の役割を再確認する


0126
総合判定表示を確認する
テキストボックスへの出力はAnalyze単位で

画像
カメラから取り込む場合はキューでやるとよさそう。
デバッグは現状の方が良いか？

フォルダに画像が入ると2604でVidiflagがtrueになるため検査開始する。
カメラで撮影した際の処理も考えるか？

カメラの露光時間設定はどうするか？
設定できた方がよさそう。

pylon
unit numDevicesでカメラ数を設定
＞自動取得するらしい？

206 DeviceByIndex()で接続するカメラを指定する


0125
結果表示部をスタックを使用した処理に変更
デバッグ用の保存処理を作成

0118
検査開始フラグの見直しが必要。
ViDi処理部までは動作を確認。
結果表示に時間がかかるので、配列の処理を見直す必要がある。

ViDi処理部で先頭から順に格納し、
テキストボックス表示部でnullになっているインデックスを調べ、
後ろから配列の要素を表示していく？

ViDi処理部でインデックスを保持し、結果表示で保持したインデックスから
表示していく？

しきい値、使用するAnalyze数を設定したうえで動作確認が必要。



0117
起動後、ファイルを読み込むと検査開始していないのにViDi処理に入ってしまう
フラグ管理の見直しが必要
kekkaの処理を変更する

0116
DIO処理をすべてコメントアウト
デバッグ用の画像取り込み処理を作成

0113
初期設定部、品種設定部の不具合を修正。
デバッグ用の画像取り込み処理作成、動作確認が必要。

検査開始処理で品種、ワークスペースを読み込んでいないので修正が必要。


0106
プラットフォームをx64>Any CPUに変更したらエラーが出なくなった。


1223
署名エラーが出たのでclickonceのチェックを外した。
＞wibuの参照ができていないとエラーが出た
なぜかwibuがbin>x64>debugのフォルダから消えていたので1021videredのフォルダから
wibuをコピーした

おそらくViDiのバージョンとCodemeterのwibuのバージョンを合わせる必要がある。
ViDi3.2?のプログラムをもとにしているので、ViDi3.2をインストールする必要がある？
またはcontrolだけVer4.2のサンプルを使用する？

ViDi3.4に対応するwibuはver6.70.3164.501
ViDi4.2に対応するwibuは?

12/25
system.serviceprocess.servicecontrollerのバージョンが異なるとエラーが表示される。
必要なverは4.2.0.0らしいが、
PC内にはver4.0.0.0しかない?

C\Programfiles(x86)\reference assemblies\microsoft\framework\.netframework
にほかのバージョンが存在する。

v472>デフォルト



例外詳細
stack trace
"   at CodeMeter.\u171b.ᜀ()\r\n   at CodeMeter.ᜎ.ᜀ(ᜦ A_0, UInt32 A_1, UInt32 A_2, Boolean A_3)\r\n
   at CodeMeter.᜔.ᜀ(CmAccessOption A_0, CmAccess2 A_1)\r\n
   at CodeMeter.Api.CmAccess2(CmAccessOption Ctrl, CmAccess2 Acc)\r\n
   at ViDi2.Common.DongleInternal.TestViDiProductCode(UInt32 productCode, String serialNumber)\r\n
   at ViDi2.Common.DongleInternal.TestViDiProductCode(ProductCode productCode)\r\n
   at ViDi2.Local.Control..ctor(LibraryAccess libraryAccess, GpuMode gpuMode, List`1 gpuDevices, Boolean activateDebugLogging)\r\n
   at ViDi2.Runtime.Local.Control..ctor(LibraryAccess libraryAccess, GpuMode gpuMode, List`1 gpuDevices, Boolean activateDebugLogging)\r\n
   at ViDi2.Runtime.Local.Control..ctor()\r\n
   at Example.Runtime.MainWindow..ctor() in C:\\Users\\kitay\\Desktop\\ViDiプログラム\\0104日立ViDiRed\\MainWindow.xaml.cs:line 342"



1219
cogdisplay関連を削除
dispformとカメラ設定ボタン（form10）を削除

Form1
名称設定を削除



ViDiの結果がnullの場合の処理
ログファイルの処理を考える。どこまで保存しておくか？
画像検査数最大100枚、通常30枚

タクト1秒？
複数品種あり、枚数変動もある。
枚数は回転速度、検査開始終了タイミングによって変動
（枚数は回転速度、開始終了のパラメータから決定される？明示的には決まっていない？）

開始、終了はレジスタの信号で制御される
＞撮影Bitが検査信号ということ！　済

画像保存　NGと判定不可は保存。OKの保存も選択できるようにする

保存速度＞画像を取りに行くまでの遅延時間のこと
＞実装の必要はない？

手動モード？

画像保存時のファイル名には判定結果を含める

11/27
・しきい値設定
　複数Streamに対応
11Streamまで適当なしきい値で初期化しておく
＞Form1にPanelを追加し作成中　済

・xmlにStreamの名称を追加する 済

・結果表示
　テキストボックスの表示設定を作成する。
　ボックスの上に新しい情報を追加していく。

・保存先フォルダの設定箇所を考える
＞取得先フォルダを保存先に変更、OKフォルダ追加中　済

・起動時パスワード設定　どこで入力を要求するか？

・Stream対応とAnalyzeの名称設定を追加する　済


11/23の課題
・xml設定　閾値：複数Streamに対応、名称：品種、Streamに対応　済

・結果表示
　テキストボックスに表示
　ただしOK、NGを分ける（上のボックスをOK,下のボックスをNGとする）　済

・1121作成のフローを反映する。　済

・結果一覧画面のレイアウト変更

・複数Stream対応の必要がある　済
＞撮影方向はPLCから入力される（ソフト先祖返りの必要がある）

・パスワード変更機能をしきい値設定画面に移植　済


11/20の課題
・メイン画面
　画像上部の表示を削除
　枠のタイトルは検査情報＞撮影画像とする　済
・撮影開始条件を変更　済

・NGがでたら検査を打ち切る
フローの見直しが必要

・検査開始・終了は撮影Bit基準に変更　済



11/13の課題
・Analyze1～5まで処理できるようにする　済
・撮影はメモリ取り込みにする　済
・判定不可の内部処理追加　済

・閾値の上限、下限を設定できるようにする　form1　済
・個別検査結果表示は各Analyzeについて出力する？
　＞表示が短すぎて見えないか？

・Analyze数を設定できるようにする　閾値-1は処理しないとしている　済

・NGの際は処理を打ち切る　済

・各画像についてOK/NGなどの表示を行う？
　＞テキストボックスで対応予定　済

・Analyzeごとに検査名称を入力する？
　＞stringで入力できるようにする　form1　済

・保存先フォルダの設定箇所を考える
＞取得先フォルダを保存先に変更


・検査時間表示はいったん削除する　済
・起動時パスワード設定　どこで入力を要求するか？

・判定不可もメイン画面に表示する
・結果一覧画面のレイアウト変更


閾値の保存方法　>　11/7 xmlを使う
画像取得失敗時の処理　>11/8　一律NG判定＋画像削除とする

個別判定一覧画面　配列v_kekka[1,n]とv_kekka[2,n]の内容を表示する
　> 11/7画面案を作成した

11/10
画面を変更する必要はそれほどなさそうなので11/9の変更は省く。
エラーラベルの非表示化を行った。
Analyzeの表示を復活

11/8
エラー発生時の処理を追加
DIO関連の不要な処理を削除

11/7
閾値設定画面の不要な要素を削除
メイン画面を調整
xml処理の不要な要素を削除

11/6
カメラでの画像取り込みも必要そうなので日立のソースにベースを移す。
11/3まで作成した内容を反映させた。


11/3
DIO初期化処理を削除
ViDi処理後に削除処理を追加
不要なOK/NG表示を削除
スコア表示の初期化処理を削除
処理時間計測・表示処理を追加

初期化部分
・取得先フォルダのパス確認・存在確認
・保存先フォルダの確認

タイマー処理部分の内容
・リセットフラグの処理　判定対象表示の初期化？＞終了処理と統合するので削除
・検査開始フラグの処理　ファイル数を確認し、処理開始フラグを立てる
・スコアフラグの処理　スコア表示の初期化　結果表示の初期化を行っていた
・ファイル取得処理フラグの処理　ファイルを取得し、画面表示の準備を行う
・ViDi処理フラグの処理　画像をViDiに渡して結果を受け取る
（・結果判定は別メソッドで存在している）　
・移動処理フラグの処理　ファイルの移動・削除と検査終了判定を行う
・検査終了の処理　検査終了処理を行う

検査開始ボタン
・検査開始フラグを立てる

品種設定処理
・品種設定リスト変更で品種に対応したワークスペースファイル読み込み



10/31
10/26からさらに不要個所を削除し、mainのDIO関連処理をコメントアウトした。
TESTコメントのライセンス関連のフラグをOFFにして、デバッグ開始で画面を表示できるようにした

結果表示用のリストをlistviewで作成した。列の幅の整え方が面倒なのでいったんそのままにしている。

ViDi処理部分をファイル取得処理のif文から分離した
Kekka処理に渡す変数からstr_fを削除
ViDi処理部をリセット時を考慮したif文から分離

10/26
1021から不要なコードを削除した。
元のコードを参照する場合は1021を参考にする。
